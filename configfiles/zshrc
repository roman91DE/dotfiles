# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
 COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

plugins=(git zsh-autosuggestions) 

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"



# Check if the shell is interactive
if [[ $- == *i* ]]; then

    # OS specific setup
    case "$(uname)" in
        Darwin) # MacOS
            export PATH="/opt/homebrew/bin:$PATH"
            alias ,brew-up="brew update ; brew upgrade ; brew cleanup"
            echo "MacOS Setup"
            ;;
        Linux)
            case "$(uname -o)" in
                Android) # Termux/Linux Emulator
                    export PATH="/data/data/com.termux/files/home/.shortcuts:$PATH"
                    alias ,pkg-up="pkg upgrade"
                    alias ,run-debian="proot-distro login debian --termux-home"
                    echo "Termux Setup"
                    ;;
                *) # Linux
                    alias ,apt-up="sudo apt update ; sudo apt upgrade -y ; sudo apt autoremove -y; sudo apt clean -y"
                    alias ,snap-up="sudo snap refresh"
                    alias ,pacman-up="sudo pacman -Syu"
                    alias ,yay-up="yay -Syu"
                    echo "Linux Setup"
                    ;;
            esac
            ;;
    esac


    # Add all script directories to the path
    for dir in $(find ~ -maxdepth 1 -type d -iname "*script*"); do
        export PATH="$dir:$PATH"
    done

    # Modified conda initialize to work with different user names and conda versions
    USERS=("rmn" "roman")
    CONDAS=("miniconda" "anaconda")
    VERSIONS=("2" "3")

    for USER in "${USERS[@]}"; do
        for CONDA in "${CONDAS[@]}"; do
            for VERSION in "${VERSIONS[@]}"; do
                path="/Users/$USER/$CONDA$VERSION/bin/conda"
                if [[ -f $path ]]; then
                    eval "$($path shell.zsh hook)"
                    alias ,conda-up="conda update --all"
                    break 3
                fi
            done
        done
    done

    # Set the default editor
    export EDITOR="vim"

    # Set the default pager
    export PAGER="less"

    # Add aliases for git add * ; git commit -m "message" ; git push where message is the date and time of the commit
    alias ,gacp='git add * ; git commit -m "$(date +%Y-%m-%d_%H:%M:%S)" ; git push'

    # vi keybindings
    bindkey -v

    # Use a custom Zsh greeting that shows the version number
    function zsh_greeting {
        echo "zsh version: $(zsh --version | cut -d ' ' -f 2)"
    }
    zsh_greeting

fi
